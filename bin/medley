#!/usr/bin/env python3
import numpy as np
import argparse
import glob
import dill
from medleysolver.runner import execute
from medleysolver.constants import SOLVERS
from medleysolver.timers import Exponential, Constant, NearestExponential, PerfectTimer, SGD
from medleysolver.classifiers import *

def main():
    global_parser = argparse.ArgumentParser(description='Solve a batch of smt queries.')

    global_parser.add_argument(
        "input",
        help="pass in input folder of smt queries.",
        type=str
    )
    global_parser.add_argument(
        "output",
        help="pass in csv file for results",
        type=str
    )
    global_parser.add_argument(
        "--extra",
        "-e",
        help="extra time to first? Add to last if not",
        type=bool,
        default=True,
    )
    global_parser.add_argument(
        "--kind",
        help="configurations for neighbor and thompson",
        type=str,
        default="full",
        # single means only pick first solver and do random for the rest.
        # greedy means thompson with means instead of sampling
        choices=["full", "single", "greedy"] 
    )

    global_parser.add_argument(
        "--reward",
        help="the kind of reward to give",
        type=str,
        default="bump",
        choices=["binary", "bump", "exp"] 
    )

    global_parser.add_argument(
        "--classifier",
        "-c",
        help="select mechanism for choosing orderings of solvers",
        type=str,
        default="neighbor",
        choices=["neighbor", "random", "MLP", "thompson", "linear", "preset", "exp3", "knearest", "perfect"]
    )

    global_parser.add_argument(
        "--preset",
        help="give preset solver to be run on all queries",
        type=str,
        default="",
        choices=list(SOLVERS.keys())
    )

    global_parser.add_argument(
        "--timeout_manager",
        "-m",
        help="choose how timeout is distributed amongst solvers",
        type=str,
        default="expo",
        choices=["expo", "const", "nearest", "perfect", "sgd"]
    )

    global_parser.add_argument(
        "--set_lambda",
        help="set initial parameter for exponential estimation.",
        type=int,
        default=0
    )

    global_parser.add_argument(
        "--confidence",
        help="set confidence for exponential estimation",
        type=float,
        default=0.95
    )

    global_parser.add_argument(
        "--set_const",
        help="set value for constant timeout manager. Default is dividing the given timeout by the number of solvers",
        type=int,
        default=0
    )

    global_parser.add_argument(
        "--timeout",
        "-t",
        help="overall timeout per query in seconds",
        type=int,
        default=60
    )

    global_parser.add_argument(
        "--seed",
        help="random seed",
        type=int,
        default=hash("Go bears!") % 2**32
    )

    global_parser.add_argument(
        "--sample",
        help="randomly sample this number from input directory",
        type=int
    )

    global_parser.add_argument(
        "--epsilon",
        help="probability of random exploration",
        type=float,
        default=0.9
    )

    global_parser.add_argument(
        "--epsilon_decay",
        help="decay rate for random exploration",
        type=float,
        default=0.9
    )

    global_parser.add_argument(
        "--save_classifier",
        "-sc",
        help="Saves classifier to the given file after execution",
        type=str
    )

    global_parser.add_argument(
        "--load_classifier",
        "-lc",
        help="Load classifier from this file",
        type=str
    )

    global_parser.add_argument(
        "--k",
        help="set k value for knearest neighbor",
        type=int,
        default=10
    )

    global_parser.add_argument(
        "--time_k",
        help="set k value for knearest neighbor",
        type=int,
        default=40
    )

    global_parser.add_argument(
        "--feature_setting",
        "-f",
        help="choose how queries are featurized",
        type=str,
        choices=["bow", "probes", "both"], 
        default="both"
    )

    global_parser.add_argument(
        "--gamma",
        help="gamma parameter for exp3",
        type=float,
        default=0.07
    )

    args = global_parser.parse_args()

    if not args.output.endswith(".csv"):
        global_parser.error("The output file needs to be a csv file.")

    np.random.seed(args.seed)
    
    problems = glob.glob(args.input + "/**.smt2", recursive=True)
    problems = sorted([p for p in problems if p.endswith(".smt2")])
    
    np.random.shuffle(problems)
    if args.sample:
        problems = np.random.choice(problems, size=min(args.sample, len(problems)), replace=False)

    if args.timeout_manager == "expo":
        if not args.set_lambda:
            args.set_lambda = 1 / (args.timeout / len(SOLVERS))
        timeout_manager = Exponential(args.set_lambda, args.confidence, args.timeout)
    elif args.timeout_manager == "const":
        if not args.set_const:
            args.set_const = args.timeout // len(SOLVERS)
        timeout_manager = Constant(args.set_const)
    elif args.timeout_manager == "nearest":
        if not args.set_lambda:
            args.set_lambda = 1 / (args.timeout / len(SOLVERS))
        timeout_manager = NearestExponential(args.set_lambda, args.confidence, args.timeout)
    elif args.timeout_manager == "perfect":
        timeout_manager = PerfectTimer()
    elif args.timeout_manager == "sgd":
        timeout_manager = SGD()
    else:
        raise RuntimeError("timeout_manager not properly set")

    if args.classifier == "neighbor":
        classifier = NearestNeighbor(args.epsilon, args.epsilon_decay, args.kind, args.time_k)
    elif args.classifier == "random":
        classifier = Random(args.time_k)
    elif args.classifier == "MLP":
        classifier = MLP(args.time_k)
    elif args.classifier == "thompson":
        classifier = Thompson(args.kind, args.time_k)
    elif args.classifier == "linear":
        classifier = LinearBandit(args.time_k)
    elif args.classifier == "preset":
        classifier = Preset(args.preset)
        timeout_manager = Constant(args.timeout)
    elif args.classifier == "exp3":
        classifier = Exp3(args.gamma, args.time_k)
    elif args.classifier == "knearest":
        classifier = KNearest(args.k, args.epsilon, args.epsilon_decay, args.time_k)
    elif args.classifier == "perfect":
        classifier = PerfectSelector(args.time_k)
    else:
        raise RuntimeError("classifier not properly set")
    
    if args.load_classifier:
        with open(args.load_classifier, "rb") as f:
            classifier = dill.load(f)
    
    execute(problems, args.output, classifier, timeout_manager, args.timeout, args.feature_setting, args.extra, args.reward)

    if args.save_classifier:
        classifier.save(args.save_classifier)






if __name__ == '__main__':
    main()
